// Code generated by MockGen. DO NOT EDIT.
// Source: cache_util.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCacheUtil is a mock of CacheUtil interface.
type MockCacheUtil struct {
	ctrl     *gomock.Controller
	recorder *MockCacheUtilMockRecorder
}

// MockCacheUtilMockRecorder is the mock recorder for MockCacheUtil.
type MockCacheUtilMockRecorder struct {
	mock *MockCacheUtil
}

// NewMockCacheUtil creates a new mock instance.
func NewMockCacheUtil(ctrl *gomock.Controller) *MockCacheUtil {
	mock := &MockCacheUtil{ctrl: ctrl}
	mock.recorder = &MockCacheUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheUtil) EXPECT() *MockCacheUtilMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheUtil) Get(key string) (interface{}, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheUtilMockRecorder) Get(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheUtil)(nil).Get), key)
}

// Set mocks base method.
func (m *MockCacheUtil) Set(key, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", key, value)
}

// Set indicates an expected call of Set.
func (mr *MockCacheUtilMockRecorder) Set(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheUtil)(nil).Set), key, value)
}
